###############################################################################
# Gitlab CI integration for Drupal 8/9 project or module: unit tests,
# code quality, linting, metrics and deploy samples.
#
# Project: https://gitlab.com/mog33/gitlab-ci-drupal
# Documentation: https://mog33.gitlab.io/gitlab-ci-drupal
# Issues: https://gitlab.com/mog33/gitlab-ci-drupal/-/issues
# Author: Jean Valverde contact@dev-drupal.com
# License: GPL-3
#
# If you want to support this project, you can
# - Buy me a coffee: https://bit.ly/34jPKcE
# - Hire me as a freelance for any Drupal related work
# - Promote me to any company looking for any Drupal related work
# - Help me with testing / Documentation / Use cases
#
# For Gitlab CI help on this file see: https://docs.gitlab.com/ee/ci/yaml
#
# This template must be included from a .gitlab-ci.yml file, see documentation.
#
###############################################################################

include:
  # Include in include must be as remote to work.
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/variables.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/variables_test.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/artifacts.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/01_build.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/02_test.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/03_qa.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/04_lint.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/05_metrics.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/06_deploy.yml'
  # [WIP] All reports in one page.
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/06_report.yml'
  # [WIP] Release to Gitlab / Github / Drupal.org
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/3.x-dev/.gitlab-ci/ci/06_release.yml'

# Variables must be used in your .gitlab-ci.yml:
#
# variables:
#   extends: .default_variables

################################################################################
# Define your stages, this will be "pipelines" in gitlab.
#   https://docs.gitlab.com/ee/ci/pipelines.html
#   https://docs.gitlab.com/ee/ci/yaml/README.html#stages
################################################################################

stages:
  - build
  - tests
  - metrics
  # [DEPLOY] All deploy jobs can be set here.phpspec/prophecy-phpunit
  # Sample of a deploy workflow:
  # - deploy to testing
  # - deploy to production

################################################################################
# Build job.
################################################################################

# For a project, this build part use composer install to get the Drupal code.
# For a theme this can be used with a specific script to build something
# (grunt, webpack, yarn...).
build:
  extends: .build_template
  rules:
    - if: '$SKIP_BUILD == "1"'
      when: never
    - when: always
  script:
    # Validate the composer.json file.
    - if [ ${CI_TYPE} == "project" ] && [ -f composer.json ]; then
        composer validate --no-check-all --no-check-publish -n --no-ansi;
      fi
    # Install the project.
    - if [ ${CI_TYPE} == "project" ] && [ -f composer.json ]; then
        echo -e "\e[0Ksection_start:`date +%s`:build_install[collapsed=true]\r\e[0K\e[1;34mComposer install\e[0m";
        composer install --no-ansi -n --prefer-dist;
        echo -e "\e[0Ksection_end:`date +%s`:build_install\r\e[0K";
      fi
    # Ensure we have Drupal Dev third party for next jobs.
    - |
      if [ ${CI_TYPE} == "project" ] && [ -f composer.json ]; then
        echo -e "\e[0Ksection_start:`date +%s`:dev_install[collapsed=true]\r\e[0K\e[1;34mComposer require dev\e[0m";
        COMPOSER_MEMORY_LIMIT=-1 composer require --no-ansi -n \
          "drupal/core-dev:~${CI_DRUPAL_VERSION}" \
          "drush/drush" \
          "drupal/drupal-extension:~4.1" \
          "dmore/behat-chrome-extension:^1.3" \
          "bex/behat-screenshot:^2.1" \
          "emuse/behat-html-formatter:0.2.*";
        echo -e "\e[0Ksection_end:`date +%s`:dev_install\r\e[0K";
      fi
    # Added phpspec for Drupal 9.0+, @see https://www.drupal.org/project/drupal/issues/3182653
    # @todo: remove when 8.9 is deprecated and add as default in ci images.
    - |
      if [ ${CI_TYPE} == "project" ] && [ -f composer.json ] && [ 1 -eq "$(echo "${CI_DRUPAL_VERSION} >= 9.0" | bc)" ]; then
        echo -e "\e[0Ksection_start:`date +%s`:prophecy_install[collapsed=true]\r\e[0K\e[1;34mInstall prophecy-phpunit for Drupal 9+\e[0m";
        composer require --no-ansi -n "phpspec/prophecy-phpunit";
        echo -e "\e[0Ksection_end:`date +%s`:prophecy_install\r\e[0K";
      fi

################################################################################
# Drupal tests.
# https://git.drupalcode.org/project/drupal/blob/HEAD/core/tests/README.md
################################################################################

phpunit_unit:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_UNITKERNEL == "1"'
      when: never
    - when: on_success
  script:
    # Prepare report folders for coverage.
    - mkdir -p report-${CI_JOB_NAME}/coverage-xml report-${CI_JOB_NAME}/coverage-html
    # Run PHPunit tests for unit, kernel, with coverage report.
    - XDEBUG_MODE=coverage ${DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${PHPUNIT_TESTS}unit,${PHPUNIT_TESTS}kernel"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${WEB_ROOT}/core
        --coverage-xml ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage-xml
        --coverage-html ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage-html
        --coverage-clover ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage.xml
        --coverage-php ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage.cov
        --coverage-text
        --colors=never
        --testdox-html report-${CI_JOB_NAME}/phpunit.html
        --log-junit report-${CI_JOB_NAME}/junit-unit-kernel.xml
        --verbose --debug
  after_script:
    # [CODECOV] integration, need to set up CI ENVIRONMENT VARIABLES 'CODECOV_TOKEN' to work.
    # see https://codecov.io
    - if [ ! -z ${CODECOV_TOKEN} ] && [ -f "report-${CI_JOB_NAME}/coverage.xml" ]; then
        bash <(curl -s https://codecov.io/bash) -f "report-${CI_JOB_NAME}/coverage.xml" || true;
      fi
  # https://docs.gitlab.com/ee/ci/yaml/#coverage
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'

phpunit_func:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_FUNCTIONAL == "1"'
      when: never
    - when: on_success # Only for this project to generate documentation.
  script:
    # For functional tests the user need to be the web server user.
    - sudo -E -u www-data ${DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${PHPUNIT_TESTS}functional"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${WEB_ROOT}/core
        --log-junit report-${CI_JOB_NAME}/junit-functional.xml
        --testdox-html report-${CI_JOB_NAME}/phpunit.html
        --verbose --debug
  after_script:
    - mkdir -p "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/browser_output"
    - cp ${BROWSERTEST_OUTPUT_DIRECTORY}/browser_output/* "report-${CI_JOB_NAME}/browser_output" || true

phpunit_funcjs:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_FUNCTIONALJS == "1"'
      when: never
    - when: on_success
  script:
    # Launch Chromedriver.
    - /scripts/start-chromedriver.sh&
    - sleep 2s
    - curl -s http://localhost:9515/status | jq '.' || true
    - ${DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${PHPUNIT_TESTS}functional-javascript"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${WEB_ROOT}/core
        --log-junit report-${CI_JOB_NAME}/junit-functionaljs.xml
        --testdox-html report-${CI_JOB_NAME}/phpunit.html
        --verbose
  after_script:
    - mkdir -p report-${CI_JOB_NAME}/browser_output
    - cp ${BROWSERTEST_OUTPUT_DIRECTORY}/browser_output/* "report-${CI_JOB_NAME}/browser_output" || true

# https://www.drupal.org/docs/8/testing/javascript-testing-using-nightwatch
nightwatchjs:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_NIGHTWATCH == "1"'
      when: never
    - when: on_success
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:nightwatch_install[collapsed=true]\r\e[0K\e[1;34mInstall NightwatchJs"
    - cd ${WEB_ROOT}/core
    # Install packages from Drupal.
    - yarn install
    # Update chromedriver if needed, the ci image include the latest stable version of chrome.
    # Drupal package.json can be late on chromedriver version.
    - yarn upgrade chromedriver@$(google-chrome --product-version | cut -d. -f1)
    # Log versions.
    - |
      node_modules/.bin/nightwatch --version
      node_modules/.bin/chromedriver --version
      /usr/bin/google-chrome --version
    # Prepare reports.
    - mkdir -p /tmp/report-${CI_JOB_NAME}
    - echo -e "\e[0Ksection_end:`date +%s`:nightwatch_install\r\e[0K"
    # Launch Nightwatch tests from core folder.
    - yarn test:nightwatch ${NIGHTWATCH_TESTS}
  after_script:
    - echo -e "\e[0Ksection_start:`date +%s`:nightwatch_install_reporter[collapsed=true]\r\e[0K\e[1;34mInstall NightwatchJs reporter"
    # Html report, install plugin and run from the xml report.
    - yarn add nightwatch-html-reporter
    - echo -e "\e[0Ksection_end:`date +%s`:nightwatch_install_reporter\r\e[0K"
    - node_modules/.bin/nightwatch-html-reporter
        --report-dir /tmp/report-${CI_JOB_NAME}
        --output nightwatch.html
        --browser false
        --theme outlook
    - cp -r /tmp/report-${CI_JOB_NAME} ${CI_PROJECT_DIR}/

################################################################################
# Third party tools tests.
################################################################################

# Symfony security-checker report.
security:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_SECURITY == "1"'
      when: never
    - when: on_success
  script:
    - mkdir -p report-${CI_JOB_NAME}
    - security-checker --path=${DOC_ROOT} -format markdown >> report-${CI_JOB_NAME}/security.txt
  # Allow failure to produce report and warning when we have an error.
  allow_failure: true

# Behat tests from behat_tests/ folder at the root of your project.
behat:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_BEHAT == "1"'
      when: never
    - when: on_success
  script:
    - |
      # Test if we have a behat.yml file
      if [ ! -f "${CI_PROJECT_DIR}/behat_tests/behat.yml" ]; then
        echo -e "\033[1;31mNo behat tests found in behat_tests/behat.yml.\033[0;37m"
        exit 1
      fi
    # Starting Chrome, we are not using Chromedriver.
    - /scripts/start-chrome.sh&
    - echo -e "\e[0Ksection_start:`date +%s`:behat_install[collapsed=true]\r\e[0K\e[1;34mInstall drupal ${BEHAT_INSTALL_PROFILE}"
    # Install Drupal with the selected profile.
    - robo drupal:install ${BEHAT_INSTALL_PROFILE}
    - echo -e "\e[0Ksection_end:`date +%s`:behat_install\r\e[0K"
    # Test Chrome is running properly.
    - curl -s http://localhost:9222/json/version | jq '.' || true
    # Run the behat tests from the 'behat_tests/' folder at the root of the project.
    - cd ${WEB_ROOT}
    - ${DOC_ROOT}/vendor/bin/behat
        --config ${CI_PROJECT_DIR}/behat_tests/behat.yml
        --format progress
        --out std
        --format junit
        --out ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}
        --format html
        --out ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}

################################################################################
# Accessibility jobs for Drupal 8+
################################################################################

accessibility_pa11y:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_PA11Y == "1"'
      when: never
    - when: on_success
  script:
    - |
      # Test if we have a pa11y config file
      if [ ! -f "${CI_PROJECT_DIR}/${PA11Y_TESTS}" ]; then
        echo -e "\033[1;31mPa11y tests file ${CI_PROJECT_DIR}/${PA11Y_TESTS} not found in this project.\033[0;37m"
        exit 1
      fi
    # Install Drupal with the selected profile.
    - echo -e "\e[0Ksection_start:`date +%s`:pa11y_install[collapsed=true]\r\e[0K\e[1;34mInstall drupal ${PA11Y_INSTALL_PROFILE} and packages"
    - robo drupal:install ${PA11Y_INSTALL_PROFILE}
    - mkdir -p "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}"
    - cd ${WEB_ROOT}/core
    # Install Pa11y-ci for tests with yarn.
    - yarn add pa11y-ci pa11y-ci-reporter-html
    - echo -e "\e[0Ksection_end:`date +%s`:pa11y_install\r\e[0K"
    # Run pa11y tests using ./gitlab-ci/pa11y-ci.json file definition.
    - node_modules/.bin/pa11y-ci
        --config ${CI_PROJECT_DIR}/${PA11Y_TESTS}
        --json
        2>&1 | tee ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/pa11y-results.json
  after_script:
    - node_modules/.bin/pa11y-ci-reporter-html
        -s ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/pa11y-results.json
        -d ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/
    - cp pa11y*.png "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}"

################################################################################
# Code quality jobs for Drupal 8+ based on PHPQA
# https://github.com/EdgedesignCZ/phpqa
# @TODO: codequality report, @see https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#use-cases
################################################################################

php-qa:
  stage: tests
  extends: .qa_template
  rules:
    - if: '$SKIP_QA == "1"'
      when: never
    - when: on_success
  script:
    # Avoid phpstan failing.
    - cd ${DOC_ROOT}
    # Check variable TOOLS_QA to select tools.
    - phpqa --tools ${TOOLS_QA}
        --config ${CI_PROJECT_DIR}/.gitlab-ci
        --buildDir "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}"
        --analyzedDirs "${DIRS_QA}"
  # Allow failure to produce report and warning, not blocking the pipeline.
  allow_failure: true

################################################################################
# Code lint jobs for Drupal 8/9
################################################################################

# This is a eslint report based on Drupal 8/9 standards.
# https://www.drupal.org/docs/develop/standards/javascript
# @TODO: junit report.
lint_js:
  stage: tests
  extends: .lint_template
  rules:
    - if: '$SKIP_LINT == "1" || $SKIP_LINT_JS == "1"'
      when: never
    - when: always
  script:
    # Added eslint option for Drupal 9.0+.
    # @todo: move as default option when 8.9 is deprecated.
    - |
      if [ 1 -eq "$(echo "${CI_DRUPAL_VERSION} >= 9.0" | bc)" ]; then
        ESLINT_RESOLVE_FIX="--resolve-plugins-relative-to ${WEB_ROOT}/core"
      fi
    # Run the eslint command to generate an html report.
    # --format junit --output-file "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/eslint-unit.xml"
    - cd ${WEB_ROOT}/core && node_modules/.bin/eslint
        --config .eslintrc.passing.json
        ${ESLINT_RESOLVE_FIX}
        --format html
        --output-file "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/eslint.html"
        "${DIRS_JS}"

# Drupal 8/9 rules used here for stylelint to check css.
# https://www.drupal.org/docs/develop/standards/css
# @TODO: stylelint html & junit report. + sass / scss support?
# https://www.npmjs.com/package/stylelint-junit-formatter
lint_css:
  stage: tests
  extends: .lint_template
  rules:
    - if: '$SKIP_LINT == "1" || $SKIP_LINT_CSS == "1"'
      when: never
    - when: always
  script:
    # Css report, terminal only.
    - cd ${WEB_ROOT}/core && node_modules/.bin/stylelint
        --config .stylelintrc.json
        --formatter verbose
        "${DIRS_CSS}"
        2>&1 | tee ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/lint_css.txt

lint_twig:
  stage: tests
  extends: .lint_template
  rules:
    - if: '$SKIP_LINT == "1" || $SKIP_LINT_TWIG == "1"'
      when: never
    - when: always
  script:
    - curl -4fsSL https://asm89.github.io/d/twig-lint.phar -o twig-lint
    # Lint report, terminal only.
    - php twig-lint lint "${DIRS_TWIG}" 2>&1 | tee ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/lint_twig.txt

################################################################################
# Code metrics, would probably make sense only for a tag release.
################################################################################

# Phpmetrics, Phploc, Pdepend report, no pass or failure as it's just informative.
# @TODO phpmetrics with junit report from code-coverage
metrics:
  stage: metrics
  extends: .metrics_template
  rules:
    - if: '$SKIP_METRICS == "1"'
      when: never
    - when: always
  script:
    # See .gitlab-ci/.phpqa.yml config for phpmetrics to choose a source.
    - cp ./report-phpunit_unit-kernel/*.xml /tmp/ || true
    - cp ./report-phpunit_functional/*.xml /tmp/ || true
    - cp ./report-phpunit_functionaljs/*.xml /tmp/ || true
    - phpqa --tools ${TOOLS_METRICS}
        --config ${CI_PROJECT_DIR}/.gitlab-ci
        --buildDir "report-${CI_JOB_NAME}"
        --analyzedDirs "${DIRS_PHP}"

################################################################################
# Base image for all ci actions, see https://gitlab.com/mog33/drupal8ci
################################################################################

default:
  image: mogtofu33/drupal8ci:${CI_IMAGE_REF}-${CI_DRUPAL_VERSION}
