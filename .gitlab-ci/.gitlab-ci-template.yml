###############################################################################
# Gitlab CI integration for Drupal 9 project or module: unit tests,
# code quality, linting, metrics and deploy samples.
#
# Project: https://gitlab.com/mog33/gitlab-ci-drupal
# Documentation: https://mog33.gitlab.io/gitlab-ci-drupal
# Issues: https://gitlab.com/mog33/gitlab-ci-drupal/-/issues
# Author: Jean Valverde contact@dev-drupal.com
# License: GPL-3
#
# If you want to support this project, you can
# - Buy me a coffee: https://bit.ly/34jPKcE
# - Hire me as a freelance for any Drupal related work
# - Promote me to any company looking for any Drupal related work
# - Help me with Testing / Documentation / Use cases
#
# For Gitlab CI help on this file see: https://docs.gitlab.com/ee/ci/yaml
#
# This template must be included from a .gitlab-ci.yml file, see documentation.
#
###############################################################################

include:
  # Include in include must be as remote to work.
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/variables.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/artifacts.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/scripts.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/01_build.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/02_test.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/03_qa.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/04_lint.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/05_metrics.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/06_deploy.yml'
  # [WIP] All reports in one page.
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/06_reports.yml'
  # [WIP] Release to Gitlab / Github / Drupal.org
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/06_release.yml'

################################################################################
# Define your stages, this will be "pipelines" in gitlab.
#   https://docs.gitlab.com/ee/ci/pipelines.html
#   https://docs.gitlab.com/ee/ci/yaml/README.html#stages
################################################################################

stages:
  - build
  - qa
  - tests
  - metrics
  # [DEPLOY] All deploy jobs can be set here.
  # Sample of a deploy workflow:
  # - deploy to testing
  # - deploy to production

################################################################################
# Build job.
################################################################################

# For a project, this build part use composer install to get the Drupal code.
# For a theme this can be used with a specific script to build something
# (grunt, webpack, yarn...).
build:
  stage: build
  extends: .build_template
  rules:
    - if: '$CI_SKIP_BUILD == "1"'
      when: never
    - when: always
  script:
    - composer self-update
    # Validate the composer.json file, install project and dev.
    - if [ -f composer.json ]; then
        composer validate --no-check-all --no-check-publish -n;
        composer install -n --prefer-dist;
        robo drupal:require-dev $CI_SKIP_TEST_BEHAT;
      fi
    - yarn --cwd ${CI_DRUPAL_WEB_ROOT}/core install
  allow_failure: false

security:
  stage: build
  needs:
    - job: build
      artifacts: true
  rules:
    - if: '$CI_SKIP_SECURITY == "1"'
      when: never
    - when: on_success
  script:
    - mkdir -p report-${CI_JOB_NAME}
    - security-checker --no-dev --format=junit >> report-${CI_JOB_NAME}/security_junit.xml

################################################################################
# Code quality jobs for Drupal 8+ based on PHPQA
# https://github.com/EdgedesignCZ/phpqa
# @todo codequality report, @see https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#use-cases
################################################################################

phpcs:
  stage: qa
  extends: .qa_template
  rules:
    - if: '$CI_SKIP_QA == "1" || $CI_SKIP_QA_PHPCS == "1"'
      when: never
    - when: on_success
  script:
    - phpcs
        --standard=${CI_QA_PHPCS_STANDARD}
        --ignore=${CI_QA_IGNORE}
        --extensions=${CI_QA_SUFFIX}
        --report-junit=report-${CI_JOB_NAME}/phpcs_junit.xml
        ${CI_DIRS_QA_PHPCS}

# @todo support --baseline-file
phpmd:
  stage: qa
  extends: .qa_template
  rules:
    - if: '$CI_SKIP_QA == "1" || $CI_SKIP_QA_PHPMD == "1"'
      when: never
    - when: on_success
  script:
    - phpmd
        ${CI_DIRS_QA_PHPMD}
        xml
        .gitlab-ci/.phpmd.xml
        --exclude ${CI_QA_IGNORE}
        --suffixes ${CI_QA_SUFFIX}
        --reportfile report-${CI_JOB_NAME}/phpmd.xml
    - xsltproc -o report-${CI_JOB_NAME}/phpmd_junit.xml .gitlab-ci/phpmd2junit.xslt report-${CI_JOB_NAME}/phpmd.xml

# @todo support --baseline
phpstan:
  stage: qa
  extends: .qa_template
  rules:
    - if: '$CI_SKIP_QA == "1" || $CI_SKIP_QA_PHPSTAN == "1"'
      when: never
    - when: on_success
  script:
    - phpstan
        analyze
        --configuration .gitlab-ci/phpstan.neon
        --error-format junit
        ${CI_DIRS_QA_PHPSTAN} >> report-${CI_JOB_NAME}/phpstan_junit.xml

parallel-lint:
  stage: qa
  extends: .qa_template
  rules:
    - if: '$CI_SKIP_QA == "1" || $CI_SKIP_QA_PARALINT == "1"'
      when: never
    - when: on_success
  script:
    - parallel-lint
        --no-progress
        --exclude vendor
        -e ${CI_QA_SUFFIX}
        --checkstyle
        ${CI_DIRS_QA_PARALINT} >> report-${CI_JOB_NAME}/parallel-lint.xml
    - xsltproc -o report-${CI_JOB_NAME}/parallel-lint_junit.xml .gitlab-ci/checkstyle2junit.xslt report-${CI_JOB_NAME}/parallel-lint.xml

################################################################################
# Code lint jobs for Drupal 9
################################################################################

# This is a eslint report based on Drupal 9 standards.
# https://www.drupal.org/docs/develop/standards/javascript
lint_js:
  stage: qa
  extends: .lint_template
  rules:
    - if: '$CI_SKIP_LINT == "1" || $CI_SKIP_LINT_JS == "1"'
      when: never
    - when: on_success
  script:
    - node ${CI_WEB_ROOT}/core/node_modules/.bin/eslint
        --config ${CI_CONFIG_ESLINT}
        --ignore-path ${CI_WEB_ROOT}/core/.eslintignore
        --resolve-plugins-relative-to ${CI_WEB_ROOT}/core
        --format junit
        --output-file "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/eslint-js_junit.xml"
        "${CI_DIRS_JS}"

# This is a eslint report for Yaml files.
lint_yaml:
  stage: qa
  extends: .lint_template
  rules:
    - if: '$CI_SKIP_LINT == "1" || $CI_SKIP_LINT_YAML == "1"'
      when: never
    - when: on_success
  script:
    - node ${CI_WEB_ROOT}/core/node_modules/.bin/eslint
        --config ${CI_CONFIG_ESLINT}
        --ignore-path ${CI_WEB_ROOT}/core/.eslintignore
        --resolve-plugins-relative-to ${CI_WEB_ROOT}/core
        --ext .yml
        --format junit
        --output-file "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/eslint-yaml_junit.xml"
        "${CI_DIRS_YAML}"

# Drupal 9 rules used here for stylelint to check css.
# https://www.drupal.org/docs/develop/standards/css
lint_css:
  stage: qa
  extends: .lint_template
  rules:
    - if: '$CI_SKIP_LINT == "1" || $CI_SKIP_LINT_CSS == "1"'
      when: never
    - when: on_success
  script:
    - yarn --cwd ${CI_DRUPAL_WEB_ROOT}/core add stylelint-junit-formatter
    - node ${CI_WEB_ROOT}/core/node_modules/.bin/stylelint
        --config ${CI_CONFIG_STYLELINT}
        --ignore-path ${CI_WEB_ROOT}/core/.stylelintignore
        --custom-formatter ${CI_WEB_ROOT}/core/node_modules/stylelint-junit-formatter
        --output-file ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/stylelint_junit.xml
        "${CI_DIRS_CSS}"

################################################################################
# Drupal tests.
# https://git.drupalcode.org/project/drupal/blob/HEAD/core/tests/README.md
################################################################################

phpunit_unit:
  stage: tests
  extends: .test_template
  rules:
    - if: '$CI_SKIP_TESTS == "1" || $CI_SKIP_TEST_UNITKERNEL == "1"'
      when: never
    - when: on_success
  services:
    - name: ${CI_SERVICE_DATABASE}
      alias: db
  script:
    # Prepare report folders for coverage.
    - mkdir -p report-${CI_JOB_NAME}/coverage-xml report-${CI_JOB_NAME}/coverage-html
    # Run PHPunit tests for unit, kernel, with coverage report.
    - XDEBUG_MODE=coverage ${CI_DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${CI_PHPUNIT_TESTS}unit,${CI_PHPUNIT_TESTS}kernel"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${CI_WEB_ROOT}/core
        --coverage-xml ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage-xml
        --coverage-text
        --log-junit report-${CI_JOB_NAME}/phpunit-unit-kernel_junit.xml
        --verbose
  after_script:
    # [CODECOV] integration, need to set up CI environment variable 'CODECOV_TOKEN' to work.
    # see https://codecov.io
    - if [ ! -z ${CODECOV_TOKEN} ] && [ -f "report-${CI_JOB_NAME}/coverage.xml" ]; then
        bash <(curl -s https://codecov.io/bash) -f "report-${CI_JOB_NAME}/coverage.xml" || true;
      fi
  # https://docs.gitlab.com/ee/ci/yaml/#coverage
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'

phpunit_func:
  stage: tests
  extends: .test_template
  rules:
    - if: '$CI_SKIP_TESTS == "1" || $CI_SKIP_TEST_FUNCTIONAL == "1"'
      when: never
    - when: on_success
  services:
    - name: ${CI_SERVICE_DATABASE}
      alias: db
  script:
    # For functional tests the user need to be the web server user.
    - sudo -E -u www-data ${CI_DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${CI_PHPUNIT_TESTS}functional"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${CI_WEB_ROOT}/core
        --log-junit report-${CI_JOB_NAME}/phpunit-functional_junit.xml
        --verbose
  after_script:
    - mkdir -p "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/browser_output"
    - cp ${BROWSERTEST_OUTPUT_DIRECTORY}/browser_output/* "report-${CI_JOB_NAME}/browser_output" || true

phpunit_funcjs:
  stage: tests
  extends: .test_template
  rules:
    - if: '$CI_SKIP_TESTS == "1" || $CI_SKIP_TEST_FUNCTIONALJS == "1"'
      when: never
    - when: on_success
  services:
    - name: ${CI_SERVICE_DATABASE}
      alias: db
    - name: ${CI_SERVICE_CHROMEDRIVER}
      alias: chrome
  script:
    # Check Chromedriver.
    - curl -s http://chrome:${CI_SERVICE_CHROMEDRIVER_PORT}/status | jq '.'
    # For functional tests the user need to be the web server user.
    - sudo -E -u www-data ${CI_DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${CI_PHPUNIT_TESTS}functional-javascript"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${CI_WEB_ROOT}/core
        --log-junit report-${CI_JOB_NAME}/phpunit-functionaljs_junit.xml
        --verbose
  after_script:
    - mkdir -p report-${CI_JOB_NAME}/browser_output
    - cp ${BROWSERTEST_OUTPUT_DIRECTORY}/browser_output/* "report-${CI_JOB_NAME}/browser_output" || true

# https://www.drupal.org/docs/8/testing/javascript-testing-using-nightwatch
nightwatchjs:
  stage: tests
  extends: .test_template
  rules:
    - if: '$CI_SKIP_TESTS == "1" || $CI_SKIP_TEST_NIGHTWATCH == "1"'
      when: never
    - when: on_success
  services:
    - name: ${CI_SERVICE_DATABASE}
      alias: db
    - name: ${CI_SERVICE_CHROMEDRIVER}
      alias: chrome
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:nightwatch_install[collapsed=true]\r\e[0K\e[1;34m Install NightwatchJs"
    # Install packages from Drupal.
    - yarn --cwd ${CI_WEB_ROOT}/core install
    # Ensure chrome is running.
    - curl -s http://chrome:${CI_SERVICE_CHROMEDRIVER_PORT}/status | jq '.'
    # Update chromedriver as Drupal package.json can be late on chrome version.
    - |
      yarn --cwd ${CI_WEB_ROOT}/core upgrade \
      chromedriver@$(curl -s http://chrome:${CI_SERVICE_CHROMEDRIVER_PORT}/status | jq '.value.build.version' | tr -d '"' | cut -d. -f1)
    - echo -e "\e[0Ksection_end:`date +%s`:nightwatch_install\r\e[0K"
    # Prepare variables.
    - envsubst < ${CI_WEB_ROOT}/core/.env.tmpl > ${CI_WEB_ROOT}/core/.env
    # Launch Nightwatch tests from core folder.
    - yarn --cwd ${CI_WEB_ROOT}/core test:nightwatch ${CI_NIGHTWATCH_TESTS}
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - "report-${CI_JOB_NAME}/"
    reports:
      junit: "report-${CI_JOB_NAME}/Tests/*.xml"

################################################################################
# Third party tools tests.
################################################################################

# Behat tests from behat_tests/ folder at the root of your project.
behat:
  stage: tests
  extends: .test_template
  rules:
    - if: '$CI_SKIP_TESTS == "1" || $CI_SKIP_TEST_BEHAT == "1"'
      when: never
    - when: on_success
  services:
    - name: ${CI_SERVICE_DATABASE}
      alias: db
    - name: ${CI_SERVICE_CHROME}
      alias: chrome
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:behat_install[collapsed=true]\r\e[0K\e[1;34m Install drupal ${CI_BEHAT_INSTALL_PROFILE}"
    # Install Drupal with the selected profile.
    - robo drupal:install ${CI_BEHAT_INSTALL_PROFILE} ${CI_BEHAT_INSTALL_DUMP}
    - echo -e "\e[0Ksection_end:`date +%s`:behat_install\r\e[0K"
    # Test Chrome is running properly.
    - curl -s -H "Host:localhost" http://chrome:${CI_SERVICE_CHROME_PORT}/json/version | jq '.'
    # Run the behat tests from the 'behat_tests/' folder at the root of the project.
    - ${CI_DOC_ROOT}/vendor/bin/behat
        --config ${CI_PROJECT_DIR}/behat_tests/behat.yml
        --format progress
        --out std
        --format junit
        --out ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}
        --verbose

################################################################################
# Code metrics, would probably make sense only for a tag release.
################################################################################

# Phpmetrics, Phploc, Pdepend report, no pass or failure as it's just informative.
# @todo phpmetrics with junit report from code-coverage?
metrics:
  stage: metrics
  extends: .metrics_template
  rules:
    - if: '$CI_SKIP_METRICS == "1"'
      when: never
    - when: always
  script:
    - phpqa --tools ${CI_TOOLS_METRICS}
        --config ${CI_PROJECT_DIR}/.gitlab-ci
        --buildDir "report-${CI_JOB_NAME}"
        --analyzedDirs "${CI_DIRS_PHP}"

################################################################################
# Base image for all ci actions, see https://gitlab.com/mog33/drupal8ci
################################################################################

default:
  image: mogtofu33/drupal8ci:${CI_IMAGE_REF}-${CI_DRUPAL_VERSION}
