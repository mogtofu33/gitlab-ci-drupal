###############################################################################
# Gitlab CI integration for Drupal 8/9 project or module: unit tests,
# code quality, linting, metrics and deploy samples.
#
# Project: https://gitlab.com/mog33/gitlab-ci-drupal
# Documentation: https://mog33.gitlab.io/gitlab-ci-drupal
# Issues: https://gitlab.com/mog33/gitlab-ci-drupal/-/issues
# Author: Jean Valverde contact@dev-drupal.com
# License: GPL-3
#
# If you want to support this project, you can
# - Buy me a coffee: https://bit.ly/34jPKcE
# - Hire me as a freelance for any Drupal related work
# - Promote me to any company looking for any Drupal related work
# - Help me with Testing / Documentation / Use cases
#
# For Gitlab CI help on this file see: https://docs.gitlab.com/ee/ci/yaml
#
# This template must be included from a .gitlab-ci.yml file, see documentation.
#
###############################################################################

include:
  # Include in include must be as remote to work.
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/variables.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/artifacts.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/01_build.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/02_test.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/03_qa.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/04_lint.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/05_metrics.yml'
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/06_deploy.yml'
  # [WIP] All reports in one page.
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/06_report.yml'
  # [WIP] Release to Gitlab / Github / Drupal.org
  - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/-/raw/4.x-dev/.gitlab-ci/ci/06_release.yml'

################################################################################
# Define your stages, this will be "pipelines" in gitlab.
#   https://docs.gitlab.com/ee/ci/pipelines.html
#   https://docs.gitlab.com/ee/ci/yaml/README.html#stages
################################################################################

stages:
  - build
  - tests
  - metrics
  # [DEPLOY] All deploy jobs can be set here.
  # Sample of a deploy workflow:
  # - deploy to testing
  # - deploy to production

################################################################################
# Build job.
################################################################################

# For a project, this build part use composer install to get the Drupal code.
# For a theme this can be used with a specific script to build something
# (grunt, webpack, yarn...).
build:
  stage: build
  extends: .build_template
  rules:
    - if: '$SKIP_BUILD == "1"'
      when: never
    - when: always
  script:
    - composer self-update
    # Validate the composer.json file.
    - if [ ${CI_TYPE} == "project" ] && [ -f composer.json ]; then
        composer validate --no-check-all --no-check-publish -n;
      fi
    # Install the project with core-dev and Drush.
    # @todo remove phpspec/prophecy-phpunit when Drupal 9 is eol.
    - |
      if [ ${CI_TYPE} == "project" ] && [ -f composer.json ]; then
        echo -e "\e[0Ksection_start:`date +%s`:install[collapsed=true]\r\e[0K\e[1;34m Composer install\e[0m";
        composer install -n --prefer-dist;
        COMPOSER_MEMORY_LIMIT=-1 composer require -n --dev \
          "drupal/core-dev:~${CI_DRUPAL_VERSION}" \
          "drush/drush" \
          "phpspec/prophecy-phpunit:^2";
        echo -e "\e[0Ksection_end:`date +%s`:install\r\e[0K";
      fi

################################################################################
# Drupal tests.
# https://git.drupalcode.org/project/drupal/blob/HEAD/core/tests/README.md
################################################################################

phpunit_unit:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_UNITKERNEL == "1"'
      when: never
    - when: on_success
  services:
    - name: ${SERVICE_DATABASE}
      alias: db
  script:
    # Prepare report folders for coverage.
    - mkdir -p report-${CI_JOB_NAME}/coverage-xml report-${CI_JOB_NAME}/coverage-html
    # Run PHPunit tests for unit, kernel, with coverage report.
    - XDEBUG_MODE=coverage ${DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${PHPUNIT_TESTS}unit,${PHPUNIT_TESTS}kernel"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${WEB_ROOT}/core
        --coverage-xml ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage-xml
        --coverage-html ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage-html
        --coverage-clover ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage.xml
        --coverage-php ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/coverage.cov
        --coverage-text
        --colors=never
        --testdox-html report-${CI_JOB_NAME}/phpunit.html
        --log-junit report-${CI_JOB_NAME}/junit-unit-kernel.xml
        --verbose --debug
  after_script:
    # [CODECOV] integration, need to set up CI ENVIRONMENT VARIABLES 'CODECOV_TOKEN' to work.
    # see https://codecov.io
    - if [ ! -z ${CODECOV_TOKEN} ] && [ -f "report-${CI_JOB_NAME}/coverage.xml" ]; then
        bash <(curl -s https://codecov.io/bash) -f "report-${CI_JOB_NAME}/coverage.xml" || true;
      fi
  # https://docs.gitlab.com/ee/ci/yaml/#coverage
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'

phpunit_func:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_FUNCTIONAL == "1"'
      when: never
    - when: on_success
  services:
    - name: ${SERVICE_DATABASE}
      alias: db
  script:
    # For functional tests the user need to be the web server user.
    - sudo -E -u www-data ${DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${PHPUNIT_TESTS}functional"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${WEB_ROOT}/core
        --log-junit report-${CI_JOB_NAME}/junit-functional.xml
        --testdox-html report-${CI_JOB_NAME}/phpunit.html
        --verbose --debug
  after_script:
    - mkdir -p "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/browser_output"
    - cp ${BROWSERTEST_OUTPUT_DIRECTORY}/browser_output/* "report-${CI_JOB_NAME}/browser_output" || true

phpunit_funcjs:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_FUNCTIONALJS == "1"'
      when: never
    - when: on_success
  services:
    - name: ${SERVICE_DATABASE}
      alias: db
    - name: ${SERVICE_CHROMEDRIVER}
      alias: chrome
  script:
    # Check Chromedriver.
    - curl -s http://chrome:9515/status | jq '.' || true
    - sudo -E -u www-data ${DOC_ROOT}/vendor/bin/phpunit
        --testsuite "${PHPUNIT_TESTS}functional-javascript"
        $([[ -z "${PHPUNIT_GROUP}" ]] && echo "" || echo "--group ${PHPUNIT_GROUP}")
        --configuration ${WEB_ROOT}/core
        --log-junit report-${CI_JOB_NAME}/junit-functionaljs.xml
        --testdox-html report-${CI_JOB_NAME}/phpunit.html
        --verbose
  after_script:
    - mkdir -p report-${CI_JOB_NAME}/browser_output
    - cp ${BROWSERTEST_OUTPUT_DIRECTORY}/browser_output/* "report-${CI_JOB_NAME}/browser_output" || true

# https://www.drupal.org/docs/8/testing/javascript-testing-using-nightwatch
nightwatchjs:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_NIGHTWATCH == "1"'
      when: never
    - when: on_success
  services:
    - name: ${SERVICE_CHROMEDRIVER}
      alias: chrome
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:nightwatch_install[collapsed=true]\r\e[0K\e[1;34m Install NightwatchJs"
    - cd ${WEB_ROOT}/core
    # Install packages from Drupal.
    - yarn --cwd ${WEB_ROOT}/core install
    # Log versions.
    - npx nightwatch --version
    # Ensure chromedriver is running.
    - curl -s http://chrome:9515/status | jq '.'
    # Prepare reports.
    - mkdir -p /tmp/report-${CI_JOB_NAME}
    - echo -e "\e[0Ksection_end:`date +%s`:nightwatch_install\r\e[0K"
    # Launch Nightwatch tests from core folder.
    - yarn test:nightwatch ${NIGHTWATCH_TESTS}
  after_script:
    - echo -e "\e[0Ksection_start:`date +%s`:nightwatch_install_reporter[collapsed=true]\r\e[0K\e[1;34m Install NightwatchJs reporter"
    # Html report, install plugin and run from the xml report.
    - yarn add nightwatch-html-reporter
    - echo -e "\e[0Ksection_end:`date +%s`:nightwatch_install_reporter\r\e[0K"
    - npx nightwatch-html-reporter
        --report-dir /tmp/report-${CI_JOB_NAME}
        --output nightwatch.html
        --browser false
        --theme outlook
    - cp -r /tmp/report-${CI_JOB_NAME} ${CI_PROJECT_DIR}/

################################################################################
# Third party tools tests.
################################################################################

# Symfony security-checker report.
security:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_SECURITY == "1"'
      when: never
    - when: on_success
  script:
    - mkdir -p report-${CI_JOB_NAME}
    - security-checker --path=${DOC_ROOT} -format markdown >> report-${CI_JOB_NAME}/security.txt
  # Allow failure to produce report and warning when we have an error.
  allow_failure: true

# Behat tests from behat_tests/ folder at the root of your project.
behat:
  stage: tests
  extends: .test_template
  rules:
    - if: '$SKIP_TESTS == "1" || $SKIP_TEST_BEHAT == "1"'
      when: never
    - when: on_success
  services:
    - name: ${SERVICE_DATABASE}
      alias: db
    - name: ${SERVICE_CHROME}
      alias: chrome
  script:
    - |
      # Test if we have a behat.yml file
      if [ ! -f "${CI_PROJECT_DIR}/behat_tests/behat.yml" ]; then
        echo -e "\033[1;31mNo behat tests found in behat_tests/behat.yml.\033[0;37m";
        exit 1
      fi
    - |
        echo -e "\e[0Ksection_start:`date +%s`:dev_install_behat[collapsed=true]\r\e[0K\e[1;34m Composer require behat\e[0m";
        COMPOSER_MEMORY_LIMIT=-1 composer require -n --dev \
          "drupal/drupal-extension:~4.1" \
          "dmore/behat-chrome-extension:^1.3" \
          "emuse/behat-html-formatter:0.2.*" \
          "friends-of-behat/mink-extension:^2.6";
        echo -e "\e[0Ksection_end:`date +%s`:dev_install_behat\r\e[0K";
    - echo -e "\e[0Ksection_start:`date +%s`:behat_install[collapsed=true]\r\e[0K\e[1;34m Install drupal ${BEHAT_INSTALL_PROFILE}"
    # Install Drupal with the selected profile.
    - robo drupal:install ${BEHAT_INSTALL_PROFILE}
    - echo -e "\e[0Ksection_end:`date +%s`:behat_install\r\e[0K"
    # Test Chrome is running properly.
    - curl -s http://chrome:3000/json/version | jq '.' || true
    # Run the behat tests from the 'behat_tests/' folder at the root of the project.
    - cd ${WEB_ROOT}
    - ${DOC_ROOT}/vendor/bin/behat
        --config ${CI_PROJECT_DIR}/behat_tests/behat.yml
        --format progress
        --out std
        --format junit
        --out ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}
        --format html
        --out ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}

################################################################################
# Code quality jobs for Drupal 8+ based on PHPQA
# https://github.com/EdgedesignCZ/phpqa
# @todo codequality report, @see https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#use-cases
################################################################################

php-qa:
  stage: tests
  extends: .qa_template
  rules:
    - if: '$SKIP_QA == "1"'
      when: never
    - when: on_success
  script:
    # Avoid phpstan failing.
    - cd ${DOC_ROOT}
    # Check variable TOOLS_QA to select tools.
    - phpqa --tools ${TOOLS_QA}
        --config ${CI_PROJECT_DIR}/.gitlab-ci
        --buildDir "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}"
        --analyzedDirs "${DIRS_QA}"
  # Allow failure to produce report and warning, not blocking the pipeline.
  allow_failure: true

################################################################################
# Code lint jobs for Drupal 8/9
################################################################################

# This is a eslint report based on Drupal 8/9 standards.
# https://www.drupal.org/docs/develop/standards/javascript
lint_js:
  stage: tests
  extends: .lint_template
  rules:
    - if: '$SKIP_LINT == "1" || $SKIP_LINT_JS == "1"'
      when: never
    - when: always
  script:
    - cd ${WEB_ROOT}/core
    - npx eslint
        --config .eslintrc.passing.json
        --resolve-plugins-relative-to ${WEB_ROOT}/core
        --format html
        --output-file "${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/eslint.html"
        "${DIRS_JS}"

# Drupal 9 rules used here for stylelint to check css.
# https://www.drupal.org/docs/develop/standards/css
lint_css:
  stage: tests
  extends: .lint_template
  rules:
    - if: '$SKIP_LINT == "1" || $SKIP_LINT_CSS == "1"'
      when: never
    - when: always
  script:
    - cd ${WEB_ROOT}/core
    - yarn add stylelint-html-formatter
    - npx stylelint
        --config .stylelintrc.json
        --custom-formatter node_modules/stylelint-html-formatter
        --output-file ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/stylelint.html
        "${DIRS_CSS}"

lint_twig:
  stage: tests
  extends: .lint_template
  rules:
    - if: '$SKIP_LINT == "1" || $SKIP_LINT_TWIG == "1"'
      when: never
    - when: always
  script:
    - curl -4fsSL https://asm89.github.io/d/twig-lint.phar -o twig-lint
    # Lint report, terminal only.
    - php twig-lint lint "${DIRS_TWIG}" 2>&1 | tee ${CI_PROJECT_DIR}/report-${CI_JOB_NAME}/lint_twig.txt

################################################################################
# Code metrics, would probably make sense only for a tag release.
################################################################################

# Phpmetrics, Phploc, Pdepend report, no pass or failure as it's just informative.
# @todo phpmetrics with junit report from code-coverage
metrics:
  stage: metrics
  extends: .metrics_template
  rules:
    - if: '$SKIP_METRICS == "1"'
      when: never
    - when: always
  script:
    # See .gitlab-ci/.phpqa.yml config for phpmetrics to choose a source.
    - cp ./report-phpunit_unit-kernel/*.xml /tmp/ || true
    - cp ./report-phpunit_functional/*.xml /tmp/ || true
    - cp ./report-phpunit_functionaljs/*.xml /tmp/ || true
    - phpqa --tools ${TOOLS_METRICS}
        --config ${CI_PROJECT_DIR}/.gitlab-ci
        --buildDir "report-${CI_JOB_NAME}"
        --analyzedDirs "${DIRS_PHP}"

################################################################################
# Base image for all ci actions, see https://gitlab.com/mog33/drupal8ci
################################################################################

default:
  image: mogtofu33/drupal8ci:${CI_IMAGE_REF}-${CI_DRUPAL_VERSION}
